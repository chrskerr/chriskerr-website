---
import { XORShift } from 'src/lib/xorshift';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import isoWeek from 'dayjs/plugin/isoWeek';
import Main from '../layouts/main.astro';
import Exercise from './_exercise.astro';

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(isoWeek);

type Exercise = {
	title: string;
	description?: string;
};

type Exercises = {
	warmup: [Exercise, Exercise, ...Exercise[]];
	squat: [Exercise, ...Exercise[]];
	overhead: [Exercise, ...Exercise[]];
	core: [Exercise, ...Exercise[]];
};

const exercisesByValidFromWeekYear: [number, Exercises][] = [
	[
		0,
		{
			warmup: [
				{ title: 'Lunges' },
				{ title: 'Kettlebell swings' },
				{ title: 'Skipping' },
				{ title: 'Echo bike with breath holds' },
				{ title: 'Something to do with jumping & landing' },
			],
			squat: [
				{ title: 'Barbell back squat' },
				{ title: 'barbell front squat' },
				{ title: 'Barbell overhead squat' },
				{ title: 'Goblet squat' },
				{ title: 'Zercher squat' },
				{ title: 'Box squat' },
			],
			overhead: [
				{ title: 'Barbell overhead press' },
				{ title: 'Double Kettlebell overhead press' },
				{ title: 'Double Dumbbell overhead press' },
				{ title: 'Single-arm half-kneeling press' },
				{ title: 'Pull ups' }, // 2x
				{ title: 'Pull ups' }, // 2x
			],
			core: [
				{ title: 'Turkish get up' },
				{ title: 'Ab wheel' },
				{ title: 'Single arm farmers walks' },
				{ title: 'Hanging toes to bar, twist to alternative sides' },
				{ title: 'L-sit holds' },
			],
		},
	],
] as const;

function getExercises(weekYear: number): Exercises {
	const exercisesTuple = exercisesByValidFromWeekYear
		.sort(([a], [b]) => b - a)
		.find(([validFrom]) => validFrom <= weekYear);
	if (!exercisesTuple) {
		throw new Error('No matched exercises');
	}

	return exercisesTuple[1];
}

function takeExercise(
	xorShift: XORShift,
	exercises: [Exercise, ...Exercise[]],
): Exercise {
	const rand = xorShift.randomInt(0, exercises.length - 1);
	const index = rand % exercises.length;
	return exercises.splice(index, 1)[0]!;
}

const now = dayjs()
	.add(2, 'days') // iso week is mon-sun, so add 2 days so that sat becomes mon
	.add(10, 'hours'); // vercel is in UTC, so add 10 hours so that 6am is actually after midnight in UTC

const yearWeek = Number(`${now.isoWeekYear()}${now.isoWeek()}`); // number in format YYYYMM
const weekXorShift = new XORShift(yearWeek);

const dayYear = Number(`${now.date()}${now.month()}${now.year()}`);
const dayXorsShift = new XORShift(dayYear);

const exercises = getExercises(yearWeek);

const warmup1 = takeExercise(dayXorsShift, exercises.warmup);
const warmup2 = takeExercise(dayXorsShift, exercises.warmup);
const squat = takeExercise(weekXorShift, exercises.squat);
const overhead = takeExercise(weekXorShift, exercises.overhead);
const core = takeExercise(weekXorShift, exercises.core);
---

<Main>
	<h1>YearWeek - {yearWeek}</h1>

	<ul class="list-disc ml-8">
		<li>
			Low training load, high impact. Goal is to improve strength in key
			movement patterns.
		</li>
		<li>Keep the effort of each set to below 70%. Target 3 reps.</li>
		<li>Should finish session feeling energised.</li>
	</ul>

	<h2>Warmup</h2>
	<ul>
		<Exercise exercise={{ title: 'Practice air squats' }} />
		<Exercise exercise={{ title: 'Practice push ups' }} />
		<Exercise exercise={warmup1} />
		<Exercise exercise={warmup2} />
	</ul>

	<h2>Squat</h2>
	<ul>
		<Exercise exercise={squat} />
	</ul>

	<h2>Overhead</h2>
	<ul>
		<Exercise exercise={overhead} />
	</ul>

	<h2>Core</h2>
	<ul>
		<Exercise exercise={core} />
	</ul>
</Main>

<style>
	h2 {
		@apply mt-8;
	}
</style>
