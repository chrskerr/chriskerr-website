
		uid: learning-to-make-a-dapp-from-scratch
		title: Learning to make a Dapp from scratch
		description: The chronical of me learning how to build my very first Dapp starting as a typical-ish React/Node developer.
		first_publication: 2021-09-25T13:28:34+10:00
		html: <p>This isn‚Äôt a tutorial, this is the chronicle of me learning about Dapps, the tools, the lingo, and mor,e as I decided to build and launch my own first Dapp. Please expect much of the information to be wrong or at least incomplete, but hopefully by the final instalment, the accuracy will be good enough for someone to make good decisions from.</p><p></p><h3>Why I started?</h3><p>This community has always fascinated me. People pushing the envelope of the tech to create services which are decoupled from the classic central internal authorities. The anti-censorship &amp; resilience aspects hold a lot of interest to me, but I'm more primarily driven by doing innovative and new things with tech. I love the idea of being at or near the bleeding edge, in at least as small part of my development work.</p><p>I also know almost nothing about crypto and this world, so it was a great excuse to learn another skill.</p><p></p><h3>Getting started</h3><p>This was a headache. So many articles are hugely ideological and light on details, or aggressively specific. As someone totally uninvolved in cryptocurrencies and this space, it was like learning programming again, everything was new and different, and opinionated, and extremely hard to know where to invest attention, or even what does what!</p><p></p><p><span class="callout">So I started trying to answer some basic questions</span></p><p></p><p><strong>What is a dApp? </strong>My current working definition is that it's just like a regularly app (web or native or otherwise) but that rather than using a classic data provider (hosted Postgres, Firestore, Mongo, etc), the data and authentication is on a distributed platform. Potentially the app itself is hosted in a distributed environment, like Tor. I also think that I read something about blockchain web addressing, but I haven't really looked at this yet. One step at a time.</p><p><strong>What are the options to build on? </strong>The major contender was Ethereum with Smart Contracts, but others exist including <a target="_blank" href="https://gun.eco">GUN</a>.</p><p><strong>Okay, so starting at Ethereum. </strong>It's a classic blockchain, everything is publicly appended to the chain and verified using Proof of Work by miners. It looks like its moving to a Proof of Stake model to make running costs lower I guess. The core piece here is that the data exists on the chain, and is very hard to remove, fake, tamper with. It is immutable. </p><p><strong>Ethereum's pros?</strong> Ethereum is hugely popular, is a stable system, with a big ecosystem, and shouldn't have any downtime concerns. Solidity is well known and apparently a highly demanded skill. There are many libraries like <a target="_blank" href="https://www.npmjs.com/package/ethers">Ethers</a> and browser plugins like <a target="_blank" href="https://metamask.io">MetaMask</a> which can be used to build upon it.</p><p><strong>...and cons?</strong> Confusing and very centralised. Most browsers can't speak directly to Ethereum, hence tools like MetaMask and Ethers, and connection platforms like <a target="_blank" href="https://infura.io/">Infura</a>, which appears to actually manage the interaction with the blockchain. This doesn't feel very P2P to me, if there are so many required intermediaries. </p><p>Would a true Ethereum browser need to run a full local node to then have quick access to the data it's looking for? If you hadn't browsed in a while, how long would you need to sync all blocks to get just the ones that you need? This sounds like a bad user experience, like a banking app which is always down. </p><p>Also, it all uses such new language that I have no clue truely what anything does. It's hard to understand how the pieces fit together.</p><p><strong>What do Smart Contracts do?</strong> The define interactions with the blockchain where you can, as an example, pay the "system" to store data in the chain. The payment is referred to as "gas".</p><p>I was also confused by these. Once published they appear hard to revoke, so what if you make a mistake or want to upgrade? Does your dApp potentially fork with some users choosing to remain on the old contract?</p><p>One of my goals here is that the users shouldn't be tied to me, as a centralised deciding body, instead they should be able to interact with the Smart Contract on their own. So how do we model this with potential versions of the contract and users choosing to migrate forward or not?</p><p>There is also public events like DAO (?) which appear to point to this idea of Smart Contracts being hard to get right and hard to fix. Scary.</p><p><strong>So how would users, public data, and private data work in Ethereum?</strong> Here is where I start getting really confused. </p><ul><li>It looks like users interact with the chain using their wallet via the providers mentioned above, to pay for their own transactions.</li><li>It looks like Smart Contracts can save data to the chain which can be accessed by anyone (maybe only via the Smart Contract or maybe directly). </li><li>Is the saved data one object? Ie any update, updates all of it? Or can it be many individual objects per user, or better yet, one object per file. This has big efficiency (and as such gas price) impacts as the dataset grows. </li><li>It looks like user accounts don't really have a concept. Instead you would locally encrypt the data using the wallet private key and then save this to the chain. So the "user account" would be the subset of saved data that the user is able to decrypt. If they "logged in" with the wrong private key, they wouldn't see anything, and would need to try a new key.</li><li>If they wanted to grant others or everyone access, they could publish a public key to decrypt that data, or save the data unencrypted (but that would mean it isn't signed, which would allow forgery).</li><li>If they want to revoke access or delete the data, then what? I think it's locked in the chain forever.</li><li>If they lose their private key, I guess their data is gone forever too.</li><li>How long do updates take to propagate? The next block, or more if things are busy? If they close the browser, does Infura hold their queued save or does it get lost? Buggered if I know. Likely Infura holds the data but it could really go a few directions here.</li></ul><p></p><p>As you can see, I'm really out of my depth on this one, and am struggling to picture how you could architect a shared but private application using Ethereum efficiently. So I got tired of thrashing about and checked out some more options.</p><p></p><p><strong>Other options: </strong>GUN as mentioned above, <a target="_blank" href="https://thegraph.com">The Graph</a>, other blockchains... So much extra complexity here, tbh I gave up digging. </p><p><strong>The Graph? </strong>They have a beautiful website and lots of cool sounding words, but I have no idea how they fit in. I'm too inexperienced here to make sense of it. Do they make querying data off of Ethereum more easy? Or can I replace MetaMask, Infura, Ethers, etc, with this and interact with Ethereum via GraphQL? ü§∑‚Äç‚ôÇÔ∏è</p><p>I stopped digging since I was looking at GUN also. </p><p><strong>GUN? </strong>GUN looks like a distributed graph database with which you can create a network for your application.</p><p>Each deployment of GUN appears to be based off of a seperate group of servers, keeping application data seperate, but also allowing anyone to add a node to the deployment to improve its distribution. There is also something coming called AXE which seems to make this more stable and perhaps incentivises people to host nodes.</p><p>GUN also allows browsers to participate in the network by hosting data, and bittorrent-style (maybe) attempting to have at least some % of the data stored in slots of places so it's always available. </p><p>Having a core primary node or two appears sensible to ensure that there is at least 1-2 copies, and then website users retain a small amount of data, and ideally other people start their own node. Anyone can then interact with that system via the GUN JavaScript libraries to log in to an account, decrypt their data, save, update, delete. Very distributed, not locked to me or my primary seed node.</p><p>This can all happen offline too, with changes being propagated peer-to-peer through the network when back online. </p><p><strong>Pros: </strong>Truely peer-to-peer in that I can go offline or change my website, and as long as a full node exists separately, then no-one needs to care. They can build their own version of the Dapp and get on with things without me. I would just be the instigator and promotor, not the owner. </p><p>There is also no user action needed to get browser-compatible. Just include the library in the app.</p><p><strong>Cons:</strong> My brain hurts thinking about some of this, so it'll be tough to ensure I deploy it well. It also doesn't have the blockchain branding, which may limit adoption. </p><p><strong>Graph database? </strong>A database defined by nodes, edges and connections. eg a collection of 'user' nodes, who are linked to other users with relationships (friend, colleague, boss, etc) and to other node types like 'job' or 'preferences'. I'm not 100% clear on this yet, but it looks like all the data is based on relationship to other data, rather than tables in a standard DB. </p><p>Perhaps this means that schema defining is impossible, and that anyone can use the GUN graph to store whatever they want, once published. Is this a risk? </p><p></p><h3>What's next?</h3><ul><li>I have started attempting to integrate GUN into a NextJS application with a view to blending user-private and user-public-yet-only-editable-by-user types of data. I will probably write about that soon.</li><li>I'm still curious about Ethereum and the possibilities here, since they so clearly exist. I'll probably look at this more too and publicly speculate as I educate. </li></ul>
		